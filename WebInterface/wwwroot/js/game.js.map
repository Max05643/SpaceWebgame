{"version":3,"file":"game.js","mappings":"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","sources":["webpack://sample/webpack/universalModuleDefinition","webpack://sample/webpack/runtime/chunk loaded","webpack://sample/./Scripts/audio.ts","webpack://sample/./Scripts/conversion.ts","webpack://sample/./Scripts/game.ts","webpack://sample/./Scripts/gamedesign.ts","webpack://sample/./Scripts/gamepage.ts","webpack://sample/./Scripts/graphic.ts","webpack://sample/./Scripts/inpututils.ts","webpack://sample/./Scripts/network.ts","webpack://sample/./Scripts/technical.ts","webpack://sample/./Scripts/ui.ts","webpack://sample/webpack/bootstrap","webpack://sample/webpack/runtime/define property getters","webpack://sample/webpack/runtime/global","webpack://sample/webpack/runtime/hasOwnProperty shorthand","webpack://sample/webpack/runtime/make namespace object","webpack://sample/webpack/runtime/node module decorator","webpack://sample/webpack/runtime/runtimeId","webpack://sample/webpack/runtime/jsonp chunk loading","webpack://sample/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sample\"] = factory();\n\telse\n\t\troot[\"sample\"] = factory();\n})(self, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import * as Sound from '@pixi/sound';\r\nimport * as GameDesign from './gamedesign';\r\n\r\nexport namespace Audio {\r\n\r\n\r\n\r\n    export class MusicController {\r\n\r\n        private musicInstance: Sound.Sound;\r\n        private targetVol: number = 0.5;\r\n        constructor() {\r\n            if (localStorage.getItem(\"music_vol\") != null) {\r\n                const currentVol = parseFloat(localStorage.getItem(\"music_vol\")!);\r\n                this.targetVol = !isNaN(currentVol) ? currentVol : 0.5;\r\n            }\r\n\r\n\r\n            this.musicInstance = Sound.Sound.from('/assets/music/soundtrack.wav');\r\n            this.musicInstance.loop = true;\r\n            this.musicInstance.volume = this.targetVol;\r\n            this.musicInstance.play();\r\n        }\r\n    }\r\n    export class AudioController {\r\n\r\n        private lastEffectPlayedId: number = -1;\r\n        private targetVol: number = 0.5;\r\n\r\n        constructor() {\r\n            Sound.sound.add(\"ex0\", \"/assets/sound/explosion0.wav\");\r\n            Sound.sound.add(\"ex1\", \"/assets/sound/explosion1.wav\");\r\n            Sound.sound.add(\"lr\", \"/assets/sound/laser.wav\");\r\n            Sound.sound.add(\"pk\", \"/assets/sound/pick.wav\");\r\n            Sound.sound.add(\"mvt\", \"/assets/sound/movement.wav\");\r\n\r\n            if (localStorage.getItem(\"sound_vol\") != null) {\r\n                const currentVol = parseFloat(localStorage.getItem(\"sound_vol\")!);\r\n                this.targetVol = !isNaN(currentVol) ? currentVol : 0.5;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        private PlayOneShot(effect: GameDesign.SoundEffect, currentPlayerPosition: GameDesign.ClientVector2): void {\r\n\r\n            if (effect.position == null) {\r\n                const options: Sound.PlayOptions = {\r\n                    volume: this.targetVol,\r\n                    loop: false,\r\n                };\r\n                Sound.sound.play(effect.audioClipName, options);\r\n            }\r\n            else {\r\n\r\n\r\n                const distanceSuqared = GameDesign.DistanceSquared(currentPlayerPosition, effect.position);\r\n                const k = 1 - distanceSuqared / (effect.radius! * effect.radius!);\r\n\r\n\r\n\r\n                if (k > 0) {\r\n\r\n                    const filter = new Sound.filters.StereoFilter();\r\n                    if (distanceSuqared > 1)\r\n                        filter.pan = GameDesign.Normalized(GameDesign.Difference(effect.position, currentPlayerPosition)).x;\r\n                    else\r\n                        filter.pan = 0;\r\n\r\n                    const options: Sound.PlayOptions = {\r\n                        volume: k * this.targetVol,\r\n                        loop: false,\r\n                        filters: [filter]\r\n                    };\r\n                    Sound.sound.play(effect.audioClipName, options);\r\n                }\r\n            }\r\n        }\r\n\r\n        ProcessQueue(queue: GameDesign.SoundEffect[], currentPlayerPosition: GameDesign.ClientVector2): void {\r\n\r\n            for (const effect in queue) {\r\n                const currentEffect = queue[effect];\r\n\r\n                if (currentEffect.id > this.lastEffectPlayedId) {\r\n                    this.lastEffectPlayedId = currentEffect.id;\r\n                    this.PlayOneShot(currentEffect, currentPlayerPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}","import axios from 'axios';\r\n\r\n/** Used to map minimized objects to their full versions */\r\nexport class Mapper {\r\n    private clientPersonalInfoFromServerMapping: { [key: string]: string } = {};\r\n    private clientInputToServerMapping: { [key: string]: string } = {};\r\n    isReady: boolean = false;\r\n\r\n\r\n    private async Initialize(): Promise<void> {\r\n\r\n        const result1 = await axios.get(\"/assets/clientInputMap.json\");\r\n        this.clientInputToServerMapping = result1.data;\r\n\r\n        const result2 = await axios.get(\"/assets/clientPersonalInfoMap.json\");\r\n        this.clientPersonalInfoFromServerMapping = result2.data;\r\n\r\n        this.isReady = true;\r\n    }\r\n\r\n    constructor() {\r\n        this.Initialize();\r\n    }\r\n\r\n    mapClientInputToServer(obj: any) {\r\n        return this.mapObj(obj, this.clientInputToServerMapping);\r\n    }\r\n\r\n    mapClientPersonalInfoFromServer(obj: any) {\r\n        return this.mapObj(obj, this.clientPersonalInfoFromServerMapping);\r\n    }\r\n\r\n    private mapObj(obj: any, mapping: { [key: string]: string }) {\r\n        const result: any = {};\r\n\r\n        for (const key in obj) {\r\n            const newKey = (mapping[key] == undefined) ? key : mapping[key];\r\n\r\n            if (obj[key] == null) {\r\n                result[newKey] = null;\r\n            }\r\n            else {\r\n                result[newKey] = typeof obj[key] === 'object' ? this.mapObj(obj[key], mapping) : obj[key];\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n}","import { Network } from './network';\r\nimport { Technical } from './technical';\r\nimport { InputUtils } from './inpututils';\r\nimport { UI } from './ui';\r\nimport { Graphic } from './graphic';\r\nimport { Audio } from './audio';\r\nimport * as GameDesign from './gamedesign';\r\n\r\nexport namespace Game {\r\n\r\n\r\n    /** Represents an instance of the game */\r\n    export class GameInstance {\r\n\r\n        playerId: string;\r\n        serverId: string;\r\n\r\n        serverConnection: Network.ServerConnection;\r\n        technicalInfo: Technical.TechnicalInfo = new Technical.TechnicalInfo();\r\n        keyboardInputHandler: InputUtils.KeyboardInputHandler;\r\n        gameUI: UI.GameUI;\r\n        scene: Graphic.GameScene;\r\n        audioController: Audio.AudioController;\r\n        musicController: Audio.MusicController;\r\n        chatController: UI.ChatController;\r\n\r\n\r\n        constructor(playerId: string, serverId: string, document: Document) {\r\n            this.playerId = playerId;\r\n            this.serverId = serverId;\r\n            this.gameUI = new UI.GameUI(document.getElementById(\"revivebutton\") as HTMLButtonElement,\r\n                document.getElementById(\"revivemessage\") as HTMLDivElement,\r\n                document.getElementById(\"debugmessage\") as HTMLParagraphElement,\r\n                document.getElementById(\"players-table\") as HTMLTableElement,\r\n                document.getElementById(\"safezonemessage\") as HTMLDivElement,\r\n                document.getElementById(\"investments-table\") as HTMLTableElement,\r\n                document.getElementById(\"damage-effect\") as HTMLTableElement\r\n            );\r\n\r\n            this.serverConnection = new Network.ServerConnection(\"/gamehub\", serverId);\r\n            this.keyboardInputHandler = new InputUtils.KeyboardInputHandler(document);\r\n            this.scene = new Graphic.GameScene(document, () => this.MainLoop(), 30,\r\n                document.getElementById(\"progress-bar-sample\") as HTMLDivElement);\r\n            this.audioController = new Audio.AudioController();\r\n            this.musicController = new Audio.MusicController();\r\n\r\n            try {\r\n                this.serverConnection.InitializeServerConnection((message: GameDesign.ClientGameState) => this.ReceiveGameState(message));\r\n            }\r\n            catch (error) {\r\n                console.error(\"Error initializing:\", error);\r\n            }\r\n\r\n            this.chatController = new UI.ChatController(document.getElementById(\"sendchatbutton\") as HTMLButtonElement,\r\n                document.getElementById(\"chattextcontainer\") as HTMLDivElement,\r\n                document.getElementById(\"inputchatmessage\") as HTMLInputElement,\r\n                async (message: string) => { return await this.serverConnection.SendChatMessage(message); }\r\n            );\r\n\r\n            //Start to update chat every second\r\n            setInterval(() => { this.serverConnection.GetChatMessages(this.chatController.GetLastReceivedMaxId()).then((messages) => { this.chatController.StoreNewMessages(messages); }); }, 1000);\r\n        }\r\n\r\n\r\n        lastReceivedGameState: GameDesign.ClientGameState | null = null;\r\n        lastProcessedGameState: GameDesign.ClientGameState | null = null;\r\n\r\n\r\n\r\n        /** Stores an update as a newest client personal info */\r\n        ReceiveGameState(update: GameDesign.ClientGameState) {\r\n\r\n            const currentUpdateTime: number = new Date().getTime();\r\n            this.technicalInfo.lastFrameTimeMs = currentUpdateTime - this.technicalInfo.lastUpdateTime;\r\n            this.technicalInfo.lastUpdateTime = currentUpdateTime;\r\n\r\n\r\n            if (this.lastReceivedGameState != null)\r\n                this.technicalInfo.extraGoodFrames++;\r\n\r\n            this.lastReceivedGameState = update;\r\n        }\r\n\r\n\r\n        /** A main game loop that gets called every frames. Repaint all the sprites based on last info from the server or extrapolates the last known state of the game */\r\n        MainLoop(): void {\r\n\r\n\r\n\r\n            let isGood: boolean = false;\r\n            if (this.lastReceivedGameState == null && this.lastProcessedGameState == null)\r\n                return;\r\n            else if (this.lastReceivedGameState == null) {\r\n                this.technicalInfo.droppedFrames++;\r\n\r\n                if (this.lastProcessedGameState != null)\r\n                    GameDesign.ApplyExtrapolation(this.lastProcessedGameState, this.scene.app.ticker.elapsedMS / 1000);\r\n            }\r\n            else {\r\n                this.technicalInfo.goodFrames++;\r\n                isGood = true;\r\n                this.lastProcessedGameState = this.lastReceivedGameState;\r\n                this.lastReceivedGameState = null;\r\n            }\r\n\r\n\r\n            if (this.lastProcessedGameState == null) {\r\n                this.scene.app.view.hidden = true;\r\n                this.scene.RemoveAllGraphics();\r\n                return;\r\n            }\r\n\r\n            this.gameUI.RepaintReviveInterface(this.lastProcessedGameState, () => { this.serverConnection.Revive(); });\r\n            this.gameUI.RepaintDamageEffects(this.lastProcessedGameState);\r\n            this.gameUI.RepaintSafeZoneMessage(this.lastProcessedGameState);\r\n            this.gameUI.RepaintInvestmentsTable(this.lastProcessedGameState);\r\n\r\n\r\n            if (!GameDesign.IsPlayerInGame(this.lastProcessedGameState)) {\r\n                this.scene.app.view.hidden = true;\r\n                this.scene.RemoveAllGraphics();\r\n                return;\r\n            }\r\n            else {\r\n                this.scene.app.view.hidden = false;\r\n            }\r\n\r\n\r\n            this.scene.DisplayGameObjects(this.lastProcessedGameState);\r\n\r\n            if (isGood) {\r\n                var input = this.keyboardInputHandler.GetUsersInput();\r\n                this.gameUI.AddInputFromUI(input);\r\n                this.serverConnection.SendMyInput(input);\r\n            }\r\n\r\n\r\n            this.audioController.ProcessQueue(this.lastProcessedGameState.soundEffectsQueue, this.lastProcessedGameState.objects[this.lastProcessedGameState.gameObjectsId].position);\r\n\r\n            this.gameUI.DebugMyPositionAndVelocity(this.lastProcessedGameState, this.technicalInfo);\r\n        }\r\n\r\n    }\r\n\r\n}","export class GameMessageContainer {\r\n    public id: number = -1;\r\n    public message: GameMessage | null = null;\r\n}\r\nexport class GameMessage {\r\n    public senderNick: string = \"\";\r\n    public message: string = \"\";\r\n}\r\n\r\nexport const playerViewportMaxSize: ClientVector2 =\r\n{\r\n    x: 1500,\r\n    y: 1500,\r\n    Length(): number {\r\n        return Math.sqrt(this.LengthSquared());\r\n    },\r\n    LengthSquared(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n};\r\n\r\nexport const playerAttributes: { [key: number]: string } = {\r\n    0: \"MaxHealth\",\r\n    1: \"PhysicalDamage\",\r\n    2: \"ProjectileDamage\",\r\n    3: \"Power\",\r\n    4: \"Acceleration\",\r\n    5: \"AngularSpeed\",\r\n    6: \"Reload\",\r\n};\r\n\r\nexport const possiblePlayersStatus = {\r\n    0: \"Alive\",\r\n    1: \"Dead\",\r\n    2: \"Not entered the game\"\r\n}\r\n\r\n/** Represents an audio effect. The effect can just be played or played in particular part of global world*/\r\nexport class SoundEffect {\r\n    audioClipName: string = \"\";\r\n    position: ClientVector2 | null = null;\r\n    radius: number | null = null;\r\n    id: number = 0;\r\n}\r\n\r\nexport const graphicTypeNone = 0;\r\nexport const graphicTypeStatic = 1;\r\nexport const graphicTypeAnimated = 2;\r\n\r\n\r\nexport function GetEstimatedSize(graphicInfo: GraphicInfo): ClientVector2 {\r\n    const result = new ClientVector2();\r\n\r\n    if (graphicInfo.targetSize == null) {\r\n        result.x = 100;\r\n        result.y = 100;\r\n    }\r\n    else {\r\n        result.x = graphicInfo.targetSize.x;\r\n        result.y = graphicInfo.targetSize.y;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport class GraphicLibraryEntry {\r\n    public type: number = graphicTypeNone;\r\n    public spriteInfo: SpriteInfo | null = null;\r\n    public animatedSpriteInfo: AnimatedSpriteInfo | null = null;\r\n}\r\n\r\nexport class AnimationInfo {\r\n    public secondsCompleted: number = 0;\r\n}\r\n\r\nexport class GraphicInfo {\r\n    public objectAnimationInfo: AnimationInfo | null = null;\r\n    public graphicLibraryEntryId: number = 0;\r\n    public targetSize: ClientVector2 = new ClientVector2();\r\n}\r\n\r\nexport class SpriteInfo {\r\n    public sprite: string | null = null;\r\n}\r\nexport class AnimatedSpriteInfo {\r\n    public animationName: string | null = null;\r\n    public isLoop: boolean = false;\r\n    public targetTimeInSeconds: number = 1;\r\n    public completedTimeInSeconds: number = 0;\r\n}\r\n\r\nexport function NeedToChangeGraphic(currentInfo: GraphicInfo, newInfo: GraphicInfo): boolean {\r\n    return currentInfo.graphicLibraryEntryId != newInfo.graphicLibraryEntryId;\r\n}\r\n\r\n\r\nexport class ClientGameObject {\r\n    public position: ClientVector2 = new ClientVector2();\r\n    public velocity: ClientVector2 = new ClientVector2();\r\n    public graphicInfo: GraphicInfo = new GraphicInfo();\r\n    public angle: number = 0;\r\n\r\n    public children: { [key: string]: ClientGameObject } = {};\r\n\r\n    public features: { [key: string]: string } = {};\r\n\r\n}\r\n\r\nexport class ClientGameState {\r\n    public playersCount: number = 0;\r\n    public objects: { [key: string]: ClientGameObject } = {};\r\n    public soundEffectsQueue: SoundEffect[] = [];\r\n    isSafeZone: boolean = false;\r\n    points: number = 0;\r\n    alreadyInvested: { [investmentType: number]: number; } | null = null;\r\n    health: number = 0;\r\n    maxHealth: number = 0;\r\n    gameObjectsId: string = \"\";\r\n    state: PlayerState = PlayerState.NotEntered;\r\n}\r\n\r\n/** Checks if specified player is currently in the game and is alive */\r\nexport function IsPlayerInGame(gameState: ClientGameState | null): boolean {\r\n    return gameState != null && gameState.state == PlayerState.Alive;\r\n}\r\n\r\n\r\n\r\nexport function Difference(a: ClientVector2, b: ClientVector2): ClientVector2 {\r\n    const result = new ClientVector2();\r\n\r\n    result.x = a.x - b.x;\r\n    result.y = a.y - b.y;\r\n\r\n    return result;\r\n}\r\nexport function Distance(a: ClientVector2, b: ClientVector2): number {\r\n    return Math.sqrt(DistanceSquared(a, b));\r\n}\r\nexport function DistanceSquared(a: ClientVector2, b: ClientVector2): number {\r\n    const dx = a.x - b.x;\r\n    const dy = a.y - b.y;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\nexport function Normalized(a: ClientVector2): ClientVector2 {\r\n    const result = new ClientVector2();\r\n    const length = Math.sqrt(a.x * a.x + a.y * a.y);\r\n\r\n    result.x = a.x / length;\r\n    result.y = a.y / length;\r\n\r\n    return result;\r\n}\r\n\r\nexport class ClientVector2 {\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n\r\n    Length(): number {\r\n        return Math.sqrt(this.LengthSquared());\r\n    }\r\n\r\n    LengthSquared(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n}\r\n\r\nexport enum PlayerState {\r\n    Alive = 0,\r\n    Dead = 1,\r\n    NotEntered = 2\r\n}\r\n\r\nexport class ClientInput {\r\n    public angle: number = 0;\r\n    public movementPower: number = 0;\r\n    public isFire: boolean = false;\r\n    public investmentRequest: number | null = null;\r\n    public repairRequest: boolean = false;\r\n}\r\n\r\n\r\n/** Applies extrapolation to the gameState, i.e. moves objects to their estimated positions */\r\nexport function ApplyExtrapolation(gameState: ClientGameState, delta: number): void {\r\n    for (const objectName in gameState.objects) {\r\n        const objectInfo = gameState.objects[objectName];\r\n        objectInfo.position.x = objectInfo.position.x + objectInfo.velocity.x * delta;\r\n        objectInfo.position.y = objectInfo.position.y + objectInfo.velocity.y * delta;\r\n    }\r\n\r\n    gameState.soundEffectsQueue = [];\r\n}","import * as Game from './game';\r\n\r\nnamespace GamePage {\r\n\r\n    declare let playerId: string;\r\n    declare let serverId: string;\r\n\r\n    const GameInstance: Game.Game.GameInstance = new Game.Game.GameInstance(playerId, serverId, document);\r\n}","import * as PIXI from 'pixi.js';\r\nimport * as GameDesign from './gamedesign';\r\nimport axios from 'axios';\r\n\r\nexport namespace Graphic {\r\n\r\n    const universalTextStyle = new PIXI.TextStyle({\r\n        fontFamily: 'Arial',\r\n        fontSize: 12,\r\n        fill: 0xFFFFFF,\r\n        align: 'center'\r\n    });\r\n\r\n    export class GraphicLibrary {\r\n\r\n        entries: { [key: number]: GameDesign.GraphicLibraryEntry } = {};\r\n        isReady: boolean = false;\r\n\r\n        async Init(): Promise<void> {\r\n            const result = await axios.get(\"/Game/GetGraphicLibrary\");\r\n            this.entries = result.data;\r\n            this.isReady = true;\r\n        }\r\n\r\n        constructor() {\r\n            this.Init();\r\n        }\r\n\r\n    }\r\n\r\n    export class BackGroundController {\r\n\r\n        backgroundObj: PIXI.TilingSprite;\r\n\r\n        constructor(background: string, app: PIXI.Application) {\r\n            const backgroundTexture = PIXI.Texture.from('/assets/backgrounds/' + background);\r\n            this.backgroundObj = new PIXI.TilingSprite(backgroundTexture, app.screen.width, app.screen.height);\r\n\r\n            app.stage.addChild(this.backgroundObj);\r\n        }\r\n\r\n        HandleWindowResize(): void {\r\n            this.backgroundObj.width = window.innerWidth;\r\n            this.backgroundObj.height = window.innerHeight;\r\n        }\r\n\r\n        Destroy(): void {\r\n            this.backgroundObj.parent.removeChild(this.backgroundObj);\r\n        }\r\n    }\r\n\r\n    /** Represents an object in GameScene that have a sprite assigned to it*/\r\n    export class SceneObject {\r\n\r\n        pixiObj: PIXI.Container | null = null;\r\n\r\n        parent: PIXI.Container;\r\n\r\n        app: PIXI.Application;\r\n\r\n        public graphicInfo: GameDesign.GraphicInfo;\r\n\r\n        public textForObject: PIXI.Text | null = null;\r\n\r\n        public healthBar: HTMLDivElement | null = null;\r\n\r\n        public objName: string;\r\n\r\n        public children: { [key: string]: SceneObject } = {};\r\n\r\n        Destroy(): void {\r\n            for (const child in this.children) {\r\n                this.children[child].Destroy();\r\n                delete this.children[child];\r\n            }\r\n\r\n            if (this.pixiObj != null) {\r\n                this.pixiObj.parent.removeChild(this.pixiObj);\r\n                this.pixiObj = null;\r\n            }\r\n            if (this.textForObject != null) {\r\n                this.parent.removeChild(this.textForObject);\r\n                this.textForObject = null;\r\n            }\r\n            if (this.healthBar != null) {\r\n                this.healthBar.parentNode!.removeChild(this.healthBar);\r\n                this.healthBar = null;\r\n            }\r\n        }\r\n\r\n        private ApplyTransformations(targetSize: GameDesign.ClientVector2 | null, position: GameDesign.ClientVector2, angle: number): void {\r\n\r\n            this.pixiObj!.rotation = angle;\r\n            this.pixiObj!.position.set(position.x, -position.y);\r\n\r\n            if (targetSize == null || targetSize.x == 0 && targetSize.y == 0) {\r\n                return;\r\n            }\r\n            this.pixiObj!.width = targetSize.x\r\n            this.pixiObj!.height = targetSize.y;\r\n\r\n        }\r\n\r\n        private SetHealthBar(value: number | null, progressBarSample: HTMLDivElement, gameScene: GameScene, graphicLibrary: GraphicLibrary): void {\r\n            const graphicLibEntry = graphicLibrary.entries[this.graphicInfo.graphicLibraryEntryId];\r\n\r\n            if (value == null || graphicLibEntry.type == GameDesign.graphicTypeNone) {\r\n                if (this.healthBar != null)\r\n                    progressBarSample.parentNode!.removeChild(this.healthBar);\r\n                this.healthBar = null;\r\n            }\r\n            else {\r\n                if (this.healthBar == null) {\r\n                    const originalDiv = progressBarSample;\r\n                    const clonedDiv = originalDiv.cloneNode(true) as HTMLDivElement;\r\n                    clonedDiv.id = `healthbar${this.objName}`;\r\n                    progressBarSample.parentNode!.appendChild(clonedDiv);\r\n                    this.healthBar = clonedDiv;\r\n                }\r\n\r\n                const positionOfObject = new GameDesign.ClientVector2();\r\n                positionOfObject.x = (this.pixiObj!.position.x + gameScene.mainContainer.position.x) * gameScene.currentStageScale;\r\n                positionOfObject.y = (this.pixiObj!.position.y + gameScene.mainContainer.position.y + this.pixiObj!.height * 0.5) * gameScene.currentStageScale;\r\n\r\n                this.healthBar!.hidden = false;\r\n                this.healthBar!.style.display = 'block';\r\n                this.healthBar!.style.visibility = (value > 0) ? 'visible' : \"hidden\";\r\n                this.healthBar!.style.position = 'absolute';\r\n                this.healthBar!.style.left = `${positionOfObject.x - 50}px`;\r\n                this.healthBar!.style.top = `${positionOfObject.y + 30}px`;\r\n\r\n                (this.healthBar!.querySelector('.progress-bar') as HTMLDivElement).style.width = `${value}%`;\r\n                (this.healthBar!.querySelector('.progress-bar') as HTMLDivElement).setAttribute(\"aria-valuenow\", value.toString());\r\n\r\n\r\n            }\r\n        }\r\n\r\n        private SetText(text: string | null, graphicLibrary: GraphicLibrary): void {\r\n            const graphicLibEntry = graphicLibrary.entries[this.graphicInfo.graphicLibraryEntryId];\r\n\r\n            if (text == null || graphicLibEntry.type == GameDesign.graphicTypeNone) {\r\n                if (this.textForObject != null) {\r\n                    this.parent.removeChild(this.textForObject);\r\n                    this.textForObject = null;\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (this.textForObject == null) {\r\n                    this.textForObject = new PIXI.Text('', universalTextStyle);\r\n                    this.parent.addChild(this.textForObject);\r\n                }\r\n\r\n                this.textForObject.text = text;\r\n                this.textForObject.anchor.set(0.5);\r\n                this.textForObject.x = this.pixiObj!.x;\r\n                this.textForObject.y = this.pixiObj!.y - this.pixiObj!.height * 0.5 - 30;\r\n            }\r\n        }\r\n\r\n        Repaint(gameObject: GameDesign.ClientGameObject, gameScene: GameScene, graphicLibrary: GraphicLibrary): void {\r\n\r\n            this.EnsureCorrectPixiObj(gameObject.graphicInfo, graphicLibrary);\r\n\r\n            this.graphicInfo = gameObject.graphicInfo;\r\n\r\n            this.ApplyTransformations(gameScene.ConvertVectorFromGlobalSpaceToViewSpace(gameObject.graphicInfo.targetSize), gameScene.ConvertVectorFromGlobalSpaceToViewSpace(gameObject.position), -gameObject.angle);\r\n\r\n\r\n\r\n            this.SetHealthBar(gameObject.features[\"health\"] == undefined ? null : parseInt(gameObject.features[\"health\"]), gameScene.progressBarSample, gameScene, graphicLibrary);\r\n            this.SetText(gameObject.features[\"text\"] == undefined ? null : gameObject.features[\"text\"], graphicLibrary);\r\n\r\n\r\n            this.RepaintChildren(gameObject, gameScene, graphicLibrary);\r\n            this.RemoveUnusedChildren(gameObject, gameScene);\r\n        }\r\n\r\n        constructor(objName: string, gameObject: GameDesign.ClientGameObject, parent: PIXI.Container, app: PIXI.Application, graphicLibrary: GraphicLibrary) {\r\n            this.objName = objName;\r\n            this.parent = parent;\r\n            this.graphicInfo = gameObject.graphicInfo;\r\n            this.app = app;\r\n            this.EnsureCorrectPixiObj(this.graphicInfo, graphicLibrary);\r\n        }\r\n\r\n\r\n        private RepaintChildren(gameObject: GameDesign.ClientGameObject, gameScene: GameScene, graphicLibrary: GraphicLibrary): void {\r\n            for (const child in gameObject.children) {\r\n                if (!(child in this.children)) {\r\n                    const newChild = new SceneObject(child, gameObject.children[child], this.pixiObj!, this.app, graphicLibrary);\r\n                    this.children[child] = newChild;\r\n                }\r\n                this.children[child].Repaint(gameObject.children[child], gameScene, graphicLibrary);\r\n            }\r\n        }\r\n        private RemoveUnusedChildren(gameObject: GameDesign.ClientGameObject, gameScene: GameScene): void {\r\n            for (const child in this.children) {\r\n                if (!(child in gameObject.children)) {\r\n                    this.children[child].Destroy();\r\n                    delete this.children[child];\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        private EnsureCorrectPixiObj(newGraphicInfo: GameDesign.GraphicInfo, graphicLibrary: GraphicLibrary): void {\r\n            const graphicLibEntry = graphicLibrary.entries[newGraphicInfo.graphicLibraryEntryId];\r\n\r\n            if (GameDesign.NeedToChangeGraphic(this.graphicInfo, newGraphicInfo)) {\r\n                this.Destroy();\r\n            }\r\n\r\n            if (this.pixiObj == null) {\r\n                if (graphicLibEntry.type == GameDesign.graphicTypeNone) {\r\n                    this.CreateFromContainer(newGraphicInfo);\r\n                }\r\n                else if (graphicLibEntry.type == GameDesign.graphicTypeStatic) {\r\n                    this.CreateFromStaticSprite(newGraphicInfo, graphicLibrary);\r\n                }\r\n                else if (graphicLibEntry.type == GameDesign.graphicTypeAnimated) {\r\n                    this.CreateFromAnimatedSprite(newGraphicInfo, graphicLibrary);\r\n                }\r\n            }\r\n        }\r\n\r\n        private CreateFromContainer(graphicInfo: GameDesign.GraphicInfo): void {\r\n            const container = new PIXI.Container();\r\n            container.pivot.set(0.5);\r\n            this.pixiObj = container;\r\n            this.parent.addChild(container);\r\n        }\r\n        private CreateFromStaticSprite(graphicInfo: GameDesign.GraphicInfo, graphicLibrary: GraphicLibrary): void {\r\n            const graphicLibEntry = graphicLibrary.entries[graphicInfo.graphicLibraryEntryId];\r\n\r\n            const newSprite = PIXI.Sprite.from(graphicLibEntry.spriteInfo!.sprite!);\r\n            this.pixiObj = newSprite;\r\n            this.parent.addChild(newSprite);\r\n\r\n        }\r\n        private CreateFromAnimatedSprite(graphicInfo: GameDesign.GraphicInfo, graphicLibrary: GraphicLibrary): void {\r\n            const graphicLibEntry = graphicLibrary.entries[graphicInfo.graphicLibraryEntryId];\r\n\r\n            const newSprite = PIXI.AnimatedSprite.fromFrames(PIXI.Assets.cache.get(\"/assets/sprites/sheet.json\").data.animations[graphicLibEntry.animatedSpriteInfo!.animationName!]);\r\n\r\n            this.pixiObj = newSprite;\r\n            newSprite.animationSpeed = (newSprite.totalFrames / this.app.ticker.maxFPS) / graphicLibEntry.animatedSpriteInfo!.targetTimeInSeconds;\r\n            newSprite.loop = graphicLibEntry.animatedSpriteInfo!.isLoop;\r\n\r\n\r\n            if (graphicLibEntry.animatedSpriteInfo!.isLoop) {\r\n                newSprite.play();\r\n            }\r\n            else {\r\n                if (graphicInfo.objectAnimationInfo == null) {\r\n                    newSprite.gotoAndPlay(0);\r\n                }\r\n                else {\r\n                    const currentFrame = Math.floor(newSprite.totalFrames * (graphicInfo.objectAnimationInfo.secondsCompleted / graphicLibEntry.animatedSpriteInfo!.targetTimeInSeconds));\r\n                    newSprite.gotoAndPlay(currentFrame);\r\n                }\r\n            }\r\n\r\n\r\n            this.parent.addChild(newSprite);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    /** Represents a high-level abstraction over pixi js */\r\n    export class GameScene {\r\n\r\n        graphicLibrary: GraphicLibrary;\r\n\r\n        presentObjects: { [key: string]: SceneObject } = {};\r\n\r\n        backgroundController: BackGroundController;\r\n\r\n        currentStageScale: number = 1;\r\n\r\n        /** Stores all the game objects and keeps the player centered */\r\n        mainContainer: PIXI.Container;\r\n\r\n        private CheckIfObjectInViewport(stageCoordinates: GameDesign.ClientVector2, spriteStageSize: GameDesign.ClientVector2): boolean {\r\n            stageCoordinates.x *= this.currentStageScale;\r\n            stageCoordinates.y *= this.currentStageScale;\r\n\r\n            spriteStageSize.x *= this.currentStageScale;\r\n            spriteStageSize.y *= this.currentStageScale;\r\n\r\n            const topRight: GameDesign.ClientVector2 = new GameDesign.ClientVector2();\r\n            topRight.x = stageCoordinates.x + spriteStageSize.x * 0.5;\r\n            topRight.y = stageCoordinates.y + spriteStageSize.y * 0.5;\r\n\r\n            const bottomLeft: GameDesign.ClientVector2 = new GameDesign.ClientVector2();\r\n            bottomLeft.x = stageCoordinates.x - spriteStageSize.x * 0.5;\r\n            bottomLeft.y = stageCoordinates.y - spriteStageSize.y * 0.5;\r\n\r\n            if (topRight.x < 0 && topRight.y < 0) {\r\n                return false;\r\n            }\r\n            else if (bottomLeft.x > GameDesign.playerViewportMaxSize.x && bottomLeft.y > GameDesign.playerViewportMaxSize.y) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /** Converts point from global space to pixi's pixel space */\r\n        ConvertPointFromGlobalSpaceToViewSpace(input: GameDesign.ClientVector2, startOfCoordinates: GameDesign.ClientVector2): GameDesign.ClientVector2 {\r\n            const result = new GameDesign.ClientVector2();\r\n            result.x = (input.x - startOfCoordinates.x) * 10 + this.app.screen.width * 0.5 / this.currentStageScale;\r\n            result.y = -(input.y - startOfCoordinates.y) * 10 + this.app.screen.height * 0.5 / this.currentStageScale;\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Converts vector from global space to pixi's pixel space */\r\n        ConvertVectorFromGlobalSpaceToViewSpace(input: GameDesign.ClientVector2): GameDesign.ClientVector2 {\r\n            const result = new GameDesign.ClientVector2();\r\n            result.x = input.x * 10;\r\n            result.y = input.y * 10;\r\n\r\n            return result;\r\n        }\r\n\r\n\r\n        app: PIXI.Application<HTMLCanvasElement>;\r\n\r\n        /** Are all assets loaded? */\r\n        isReady: boolean = false;\r\n\r\n\r\n\r\n        async PrepareSpriteSheet(): Promise<void> {\r\n\r\n            await PIXI.Assets.load([\"/assets/sprites/sheet.json\"]);\r\n            this.isReady = true;\r\n        }\r\n\r\n        /** Sample object for health indicators */\r\n        progressBarSample: HTMLDivElement;\r\n\r\n\r\n        HandleWindowResize(): void {\r\n            this.app.renderer.resize(window.innerWidth, window.innerHeight);\r\n            this.currentStageScale = Math.max(1, window.innerWidth / GameDesign.playerViewportMaxSize.x, window.innerHeight / GameDesign.playerViewportMaxSize.y);\r\n            this.app.stage.scale.set(this.currentStageScale);\r\n            this.backgroundController.HandleWindowResize();\r\n        }\r\n\r\n        constructor(document: Document, mainLoop: () => void, targetFrameRate: number = 30, progressBarSample: HTMLDivElement) {\r\n\r\n            this.progressBarSample = progressBarSample;\r\n\r\n            this.PrepareSpriteSheet();\r\n            this.graphicLibrary = new GraphicLibrary();\r\n\r\n            this.app = new PIXI.Application<HTMLCanvasElement>({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n                backgroundColor: \"#000000\",\r\n                autoDensity: true,\r\n                resolution: window.devicePixelRatio\r\n            });\r\n\r\n\r\n            this.backgroundController = new BackGroundController(\"back0.png\", this.app);\r\n\r\n            this.app.ticker.maxFPS = targetFrameRate;\r\n            document.body.appendChild(this.app.view);\r\n            this.app.ticker.add(mainLoop);\r\n            this.app.ticker.start();\r\n            this.app.view.hidden = true;\r\n\r\n            this.HandleWindowResize();\r\n            window.addEventListener('resize', () => { this.HandleWindowResize(); });\r\n\r\n            this.mainContainer = new PIXI.Container();\r\n            this.mainContainer.width = 0;\r\n            this.mainContainer.height = 0;\r\n            this.mainContainer.pivot.set(0.5);\r\n            this.app.stage.addChild(this.mainContainer);\r\n        }\r\n\r\n\r\n        private DisplayGameObject(objectName: string, objectInfo: GameDesign.ClientGameObject, startOfCoordinates: GameDesign.ClientVector2): void {\r\n\r\n            const positionInViewSpace = this.ConvertPointFromGlobalSpaceToViewSpace(objectInfo.position, startOfCoordinates);\r\n            if (!this.CheckIfObjectInViewport(positionInViewSpace, GameDesign.GetEstimatedSize(objectInfo.graphicInfo))) {\r\n                this.EnsureGraphicObjectRemoved(objectName);\r\n            }\r\n            else {\r\n                let currentHandle: SceneObject | null = null;\r\n\r\n                if (objectName in this.presentObjects) {\r\n                    currentHandle = this.presentObjects[objectName];\r\n                }\r\n                else {\r\n                    currentHandle = new SceneObject(objectName, objectInfo, this.mainContainer, this.app, this.graphicLibrary);\r\n                    this.presentObjects[objectName] = currentHandle;\r\n                }\r\n\r\n                currentHandle.Repaint(objectInfo, this, this.graphicLibrary);\r\n            }\r\n        }\r\n\r\n        DisplayGameObjects(gameState: GameDesign.ClientGameState): void {\r\n\r\n\r\n            if (!this.isReady || !this.graphicLibrary.isReady)\r\n                return;\r\n\r\n            const startOfCoordinates = gameState.objects[gameState.gameObjectsId].position;\r\n\r\n\r\n            const mainContainerPos = this.ConvertVectorFromGlobalSpaceToViewSpace(startOfCoordinates);\r\n            mainContainerPos.x = -mainContainerPos.x + this.app.screen.width * 0.5 / this.currentStageScale;\r\n            mainContainerPos.y = mainContainerPos.y + this.app.screen.height * 0.5 / this.currentStageScale;\r\n\r\n            this.mainContainer.position.set(mainContainerPos.x, mainContainerPos.y);\r\n\r\n            for (const objectName in gameState.objects) {\r\n                const objectInfo = gameState.objects[objectName];\r\n                this.DisplayGameObject(objectName, objectInfo, startOfCoordinates);\r\n            }\r\n\r\n            this.RemoveUnusedGraphics(gameState);\r\n\r\n        }\r\n\r\n        RemoveAllGraphics(): void {\r\n            for (const existingObjectName in this.presentObjects) {\r\n                this.EnsureGraphicObjectRemoved(existingObjectName);\r\n            }\r\n        }\r\n\r\n        private RemoveUnusedGraphics(gameState: GameDesign.ClientGameState): void {\r\n            for (const existingObjectName in this.presentObjects) {\r\n                if (!(existingObjectName in gameState.objects)) {\r\n                    this.EnsureGraphicObjectRemoved(existingObjectName);\r\n                }\r\n            }\r\n        }\r\n\r\n        private EnsureGraphicObjectRemoved(objectName: string): void {\r\n            if (this.presentObjects[objectName]) {\r\n                const spriteToRemove = this.presentObjects[objectName];\r\n\r\n                spriteToRemove.Destroy();\r\n\r\n                delete this.presentObjects[objectName];\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n","import * as GameDesign from './gamedesign';\r\n\r\nexport namespace InputUtils {\r\n    /**Handles user input, i.e. allows to retrieve keys that a currently pressed*/\r\n    export class KeyboardInputHandler {\r\n        keyStates: { [key: string]: boolean } = {};\r\n        leftMouseButtonPressed: boolean = false;\r\n        lastAngle: number = 0;\r\n        lastMovementPower: number = 0;\r\n\r\n        constructor(document: Document) {\r\n            document.addEventListener('keydown', (event) => {\r\n                if (event.target == null || !(event.target as Element).matches('input, button')) {\r\n                    this.keyStates[event.code.toUpperCase()] = true;\r\n                }\r\n            });\r\n\r\n            document.addEventListener('keyup', (event) => {\r\n                if (event.target == null || !(event.target as Element).matches('input, button')) {\r\n                    this.keyStates[event.code.toUpperCase()] = false;\r\n                }\r\n            });\r\n\r\n\r\n            document.addEventListener('mousemove', (event) => {\r\n                let mouseX = event.clientX - window.innerWidth * 0.5;\r\n                let mouseY = event.clientY - window.innerHeight * 0.5;\r\n\r\n\r\n                const mouseVector = new GameDesign.ClientVector2();\r\n                mouseVector.x = mouseX;\r\n                mouseVector.y = mouseY;\r\n                this.lastMovementPower = Math.max(Math.min((mouseVector.Length() - 100) / 200, 1), 0);\r\n\r\n                if (mouseY == 0 && mouseX == 0)\r\n                    mouseY = 1;\r\n\r\n\r\n\r\n                this.lastAngle = Math.atan2(-mouseY, mouseX);\r\n            });\r\n\r\n\r\n            document.addEventListener('mousedown', (event) => {\r\n                if (event.target == null || !(event.target as Element).matches('input, button')) {\r\n                    if (event.button === 0) {\r\n                        this.leftMouseButtonPressed = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            document.addEventListener('mouseup', (event) => {\r\n                if (event.target == null || !(event.target as Element).matches('input, button')) {\r\n                    if (event.button === 0) {\r\n                        this.leftMouseButtonPressed = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private IsKeyDown(key: string): boolean {\r\n            return this.keyStates[key.toUpperCase()];\r\n        }\r\n\r\n\r\n        /** Retrieves user input from current keyboard + mouse state */\r\n        GetUsersInput(): GameDesign.ClientInput {\r\n            const result = new GameDesign.ClientInput();\r\n\r\n            result.angle = this.lastAngle;\r\n            result.movementPower = this.lastMovementPower;\r\n            result.isFire = this.leftMouseButtonPressed;\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n","import * as signalR from '@microsoft/signalr';\r\nimport * as MP from '@microsoft/signalr-protocol-msgpack';\r\nimport { Mapper } from './conversion';\r\nimport * as GameDesign from './gamedesign';\r\n\r\nexport namespace Network {\r\n    /** Manages the server connection via SignalR */\r\n    export class ServerConnection {\r\n\r\n        mapper: Mapper;\r\n        connection: signalR.HubConnection;\r\n        serverId: string;\r\n\r\n        constructor(endpoint: string, serverId: string) {\r\n            this.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(endpoint)\r\n                .withHubProtocol(new MP.MessagePackHubProtocol())\r\n                .build();\r\n            this.serverId = serverId;\r\n            this.mapper = new Mapper();\r\n        }\r\n\r\n        async SendChatMessage(message: string): Promise<boolean> {\r\n            return await this.connection.invoke<boolean>(\"AddChatMessage\", this.serverId, message);\r\n        }\r\n\r\n        async GetChatMessages(id: number): Promise<GameDesign.GameMessageContainer[] | null> {\r\n            return await this.connection.invoke<GameDesign.GameMessageContainer[] | null>(\"GetChatMessages\", this.serverId, id);\r\n        }\r\n\r\n\r\n        /** Initializes the connection */\r\n        async InitializeServerConnection(personalInfoHandler: (message: GameDesign.ClientGameState) => void): Promise<void> {\r\n            this.connection.on(\"ReceivePerosnalInfo\", (message) => {\r\n                if (this.mapper.isReady) {\r\n                    const result = this.mapper.mapClientPersonalInfoFromServer(message) as GameDesign.ClientGameState;\r\n                    personalInfoHandler(result);\r\n                }\r\n            });\r\n            this.connection.on(\"ReceiveRemovalFromGameNotification\", () => {\r\n                document.location = \"/Game/Kicked\";\r\n            });\r\n            await this.connection.start();\r\n            await this.connection.invoke<void>(\"SubscribeToUpdates\", this.serverId);\r\n        }\r\n        /** Sends a request to revive the player */\r\n        async Revive(): Promise<void> {\r\n            await this.connection.invoke<void>(\"Revive\", this.serverId);\r\n        }\r\n\r\n        /** Send an input to the server */\r\n        async SendMyInput(input: GameDesign.ClientInput): Promise<void> {\r\n            if (this.mapper.isReady) {\r\n                const result = this.mapper.mapClientInputToServer(input);\r\n                await this.connection.invoke<void>(\"SendInput\", this.serverId, result);\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nexport namespace Technical {\r\n\r\n    /** Stores technical information about current game */\r\n    export class TechnicalInfo {\r\n\r\n        /** Number of frames that were correctly retrieved from the server before being rendered */\r\n        goodFrames: number = 0;\r\n\r\n        /** Number of frames that were correctly retrieved from the server before being rendered, but were unnecessary */\r\n        extraGoodFrames: number = 0;\r\n\r\n        /** Number of frames that were extrapolated */\r\n        droppedFrames: number = 0;\r\n\r\n        lastUpdateTime: number = new Date().getTime();\r\n\r\n        lastFrameTimeMs: number = 0;\r\n    }\r\n\r\n}\r\n","import * as GameDesign from './gamedesign';\r\nimport { Technical } from './technical';\r\n\r\nexport namespace UI {\r\n\r\n    //** Handles the UI part of the game's chat and caches messages locally */\r\n    export class ChatController {\r\n        private sendButton: HTMLButtonElement;\r\n        private textContainer: HTMLElement;\r\n        private messageContainer: HTMLInputElement;\r\n\r\n        private lastReceivedMaxMessageId: number = -1;\r\n        private sendMessageNetworkHandler: (message: string) => Promise<boolean>;\r\n        private storedMessages: GameDesign.GameMessageContainer[] = [];\r\n\r\n\r\n        private async SendMessage(): Promise<void> {\r\n            if (this.sendMessageNetworkHandler == null)\r\n                return;\r\n\r\n            const message = this.messageContainer.value;\r\n            if (message == null || message.length > 100 || message.length == 0) {\r\n                return;\r\n            }\r\n\r\n            const result = await this.sendMessageNetworkHandler(message);\r\n\r\n            if (result) {\r\n                this.messageContainer.value = \"\";\r\n            }\r\n        }\r\n\r\n        GetLastReceivedMaxId(): number {\r\n            return this.lastReceivedMaxMessageId;\r\n        }\r\n\r\n\r\n        StoreNewMessages(messages: GameDesign.GameMessageContainer[] | null): void {\r\n\r\n            if (messages == null || messages.length == 0)\r\n                return;\r\n\r\n            const newMax = Math.max(...messages.map(mess => mess.id));\r\n\r\n            if (newMax <= this.lastReceivedMaxMessageId) {\r\n                return;\r\n            }\r\n\r\n\r\n\r\n            for (const message of messages) {\r\n                if (message.id > this.lastReceivedMaxMessageId)\r\n                    this.storedMessages.push(message);\r\n            }\r\n\r\n            if (this.storedMessages.length > 10) {\r\n                this.storedMessages = this.storedMessages.slice(this.storedMessages.length - 10);\r\n            }\r\n\r\n            this.lastReceivedMaxMessageId = newMax;\r\n\r\n\r\n            this.Repaint();\r\n        }\r\n\r\n        Repaint(): void {\r\n            this.textContainer.innerHTML = \"\";\r\n            for (const message of this.storedMessages.slice().reverse()) {\r\n                this.textContainer.innerHTML += '<br>';\r\n                this.textContainer.innerHTML += `${message.message?.senderNick}:${message.message?.message}`;\r\n            }\r\n        }\r\n\r\n        constructor(sendButton: HTMLButtonElement, textContainer: HTMLElement, messageContainer: HTMLInputElement, sendMessageNetworkHandler: (message: string) => Promise<boolean>) {\r\n            this.sendButton = sendButton;\r\n            this.textContainer = textContainer;\r\n            this.messageContainer = messageContainer;\r\n            this.sendMessageNetworkHandler = sendMessageNetworkHandler;\r\n\r\n            this.sendButton.onclick = () => { this.SendMessage(); };\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    /** Stores references to UI elements and handles interaction with them*/\r\n    export class GameUI {\r\n        /** Button used to revive player */\r\n        private reviveButton: HTMLButtonElement;\r\n        /** Window that is displayed when player is dead or not entered the game */\r\n        private reviveMessage: HTMLDivElement;\r\n        /** Text that shows debug info */\r\n        private debugMessage: HTMLParagraphElement;\r\n        /** Table for displaying players info */\r\n        private playersTable: HTMLTableElement;\r\n        /** Message stating that player is in safe zone */\r\n        private safeZoneMessage: HTMLDivElement;\r\n        /** Table for displaying players info */\r\n        private investmentsTable: HTMLTableElement;\r\n        /** An element for damage effects */\r\n        private damageEffects: HTMLElement;\r\n\r\n        private lastInvestmentRequest: number | null = null;\r\n        private lastRepairRequest: boolean = false;\r\n\r\n        AddInputFromUI(input: GameDesign.ClientInput): void {\r\n            input.investmentRequest = this.lastInvestmentRequest;\r\n            input.repairRequest = this.lastRepairRequest;\r\n            this.lastInvestmentRequest = null;\r\n            this.lastRepairRequest = false;\r\n        }\r\n\r\n        constructor(reviveButton: HTMLButtonElement, reviveMessage: HTMLDivElement, debugMessage: HTMLParagraphElement, playersTable: HTMLTableElement, safeZoneMessage: HTMLDivElement, investmentsTable: HTMLTableElement, damageEffects: HTMLElement) {\r\n            this.debugMessage = debugMessage;\r\n            this.reviveButton = reviveButton;\r\n            this.reviveMessage = reviveMessage;\r\n            this.playersTable = playersTable;\r\n            this.safeZoneMessage = safeZoneMessage;\r\n            this.investmentsTable = investmentsTable;\r\n            this.damageEffects = damageEffects;\r\n        }\r\n\r\n\r\n        RepaintDamageEffects(gameState: GameDesign.ClientGameState | null): void {\r\n            if (gameState == null || !GameDesign.IsPlayerInGame(gameState))\r\n                this.damageEffects.hidden = true;\r\n            else {\r\n                const healthNormalized = gameState.health / gameState.maxHealth;\r\n                this.damageEffects.hidden = false;\r\n                this.damageEffects.style.opacity = (0.3 * (1 - healthNormalized)).toString();\r\n            }\r\n        }\r\n\r\n        RepaintSafeZoneMessage(gameState: GameDesign.ClientGameState | null): void {\r\n            if (gameState == null) {\r\n                this.safeZoneMessage.hidden = true;\r\n            }\r\n            else {\r\n                this.safeZoneMessage.hidden = !gameState.isSafeZone;\r\n            }\r\n        }\r\n\r\n\r\n        RepaintInvestmentsTable(gameState: GameDesign.ClientGameState | null): void {\r\n            if (gameState == null || gameState.alreadyInvested == null || !gameState.isSafeZone) {\r\n                this.investmentsTable.hidden = true;\r\n            }\r\n            else {\r\n\r\n                this.investmentsTable.hidden = false;\r\n\r\n                const repairButton = this.investmentsTable.querySelector(\"#repairButton\") as HTMLDivElement;\r\n\r\n\r\n                if (gameState.health < gameState.maxHealth && gameState.points >= (gameState.maxHealth - gameState.health)) {\r\n                    repairButton.hidden = false;\r\n                    repairButton.onclick = () => { this.lastRepairRequest = true; };\r\n                    repairButton.innerHTML = `Repair for ${(gameState.maxHealth - gameState.health)} points`;\r\n                }\r\n                else {\r\n                    repairButton.hidden = true;\r\n                }\r\n\r\n\r\n                const innerContent = this.investmentsTable.querySelector('tbody') as HTMLTableSectionElement;\r\n\r\n\r\n                for (let i = 0; i <= 6; i++) {\r\n\r\n                    const row = innerContent.rows[i] == undefined ? innerContent.insertRow() : innerContent.rows[i];\r\n\r\n                    const currentVal = gameState.alreadyInvested[i];\r\n\r\n                    const cell1 = row.cells[0] == undefined ? row.insertCell(0) : row.cells[0];\r\n                    cell1.innerHTML = GameDesign.playerAttributes[i];\r\n\r\n                    const cell2 = row.cells[1] == undefined ? row.insertCell(1) : row.cells[1];\r\n                    cell2.innerHTML = `${currentVal}/100`;\r\n\r\n                    const cell3 = row.cells[2] == undefined ? row.insertCell(2) : row.cells[2];\r\n\r\n                    if (cell3.children[0] == undefined) {\r\n                        const newButton = document.createElement(\"div\");\r\n                        newButton.innerHTML = \"Update (10 points)\";\r\n                        newButton.classList.add('btn', 'btn-info', 'btn-sm');\r\n                        cell3.appendChild(newButton);\r\n                    }\r\n                    const updateButton = cell3.children[0] as HTMLDivElement;\r\n\r\n\r\n\r\n\r\n                    if (currentVal < 100 && gameState.points >= 10) {\r\n                        updateButton.hidden = false;\r\n                        row.classList.add('table-success');\r\n                        updateButton.onclick = () => { this.lastInvestmentRequest = i; };\r\n                    }\r\n                    else {\r\n                        updateButton.hidden = true;\r\n                        row.classList.remove('table-success');\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        DebugMyPositionAndVelocity(gameState: GameDesign.ClientGameState, info: Technical.TechnicalInfo): void {\r\n\r\n            const myObj = gameState.objects[gameState.gameObjectsId];\r\n\r\n            this.debugMessage.innerHTML = `Position: ${(myObj.position.x).toFixed(2)},${(myObj.position.y).toFixed(2)};<br>Velocity: ${(myObj.velocity.x).toFixed(2)},${(myObj.velocity.y).toFixed(2)}<br>Drops: ${info.droppedFrames}<br>Goods: ${info.goodFrames}<br>Extra goods: ${info.extraGoodFrames}`;\r\n\r\n            this.debugMessage.innerHTML += `<br> Last frame time: ${info.lastFrameTimeMs} ms`;\r\n\r\n            this.debugMessage.innerHTML += `<br>Players on server: ${gameState.playersCount}`;\r\n\r\n            if (info.goodFrames != 0) {\r\n                this.debugMessage.innerHTML += `<br>DropsToGoods: ${Math.round((info.droppedFrames / info.goodFrames) * 100)}%`;\r\n                this.debugMessage.innerHTML += `<br>ExtraGoodsToGoods: ${Math.round((info.extraGoodFrames / info.goodFrames) * 100)}%`;\r\n            }\r\n            if ('connection' in navigator) {\r\n                const connection = (navigator as any).connection;\r\n                this.debugMessage.innerHTML += `<br>Network: ${connection.effectiveType}`;\r\n                this.debugMessage.innerHTML += `<br>RRT: ${connection.rtt} ms`;\r\n            }\r\n\r\n\r\n\r\n        }\r\n        RepaintReviveInterface(gameState: GameDesign.ClientGameState | null, onReviveButtonPress: () => void): void {\r\n\r\n            if (gameState != null && gameState.state != GameDesign.PlayerState.Alive) {\r\n                this.reviveMessage.hidden = false;\r\n                this.reviveButton.onclick = onReviveButtonPress;\r\n            }\r\n            else {\r\n                this.reviveMessage.hidden = true;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.j = 757;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t757: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksample\"] = self[\"webpackChunksample\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [712], () => (__webpack_require__(8780)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","deferred","Audio","MusicController","constructor","targetVol","localStorage","getItem","currentVol","parseFloat","this","isNaN","musicInstance","Sound","from","loop","volume","play","AudioController","lastEffectPlayedId","sound","add","PlayOneShot","effect","currentPlayerPosition","position","options","audioClipName","distanceSuqared","GameDesign","DistanceSquared","k","radius","filter","filters","StereoFilter","pan","Normalized","Difference","x","ProcessQueue","queue","currentEffect","id","Initialize","result1","get","clientInputToServerMapping","data","result2","clientPersonalInfoFromServerMapping","isReady","mapClientInputToServer","obj","mapObj","mapClientPersonalInfoFromServer","mapping","result","key","newKey","undefined","Game","GameInstance","playerId","serverId","document","technicalInfo","Technical","TechnicalInfo","lastReceivedGameState","lastProcessedGameState","gameUI","UI","GameUI","getElementById","serverConnection","Network","ServerConnection","keyboardInputHandler","InputUtils","KeyboardInputHandler","scene","Graphic","GameScene","MainLoop","audioController","musicController","InitializeServerConnection","message","ReceiveGameState","error","console","chatController","ChatController","async","SendChatMessage","setInterval","GetChatMessages","GetLastReceivedMaxId","then","messages","StoreNewMessages","update","currentUpdateTime","Date","getTime","lastFrameTimeMs","lastUpdateTime","extraGoodFrames","isGood","droppedFrames","ApplyExtrapolation","app","ticker","elapsedMS","goodFrames","view","hidden","RemoveAllGraphics","RepaintReviveInterface","Revive","RepaintDamageEffects","RepaintSafeZoneMessage","RepaintInvestmentsTable","IsPlayerInGame","DisplayGameObjects","input","GetUsersInput","AddInputFromUI","SendMyInput","soundEffectsQueue","objects","gameObjectsId","DebugMyPositionAndVelocity","senderNick","playerViewportMaxSize","y","Length","Math","sqrt","LengthSquared","playerAttributes","possiblePlayersStatus","graphicTypeNone","graphicTypeStatic","graphicTypeAnimated","graphicInfo","ClientVector2","targetSize","type","spriteInfo","animatedSpriteInfo","secondsCompleted","GraphicInfo","objectAnimationInfo","graphicLibraryEntryId","a","b","dx","dy","sprite","animationName","isLoop","targetTimeInSeconds","completedTimeInSeconds","currentInfo","newInfo","velocity","angle","children","features","playersCount","isSafeZone","points","alreadyInvested","health","maxHealth","state","PlayerState","NotEntered","gameState","Alive","length","movementPower","isFire","investmentRequest","repairRequest","delta","objectName","objectInfo","GamePage","universalTextStyle","PIXI","TextStyle","fontFamily","fontSize","fill","align","GraphicLibrary","Init","entries","BackGroundController","background","backgroundTexture","Texture","backgroundObj","TilingSprite","screen","width","height","stage","addChild","HandleWindowResize","window","innerWidth","innerHeight","Destroy","parent","removeChild","SceneObject","child","pixiObj","textForObject","healthBar","parentNode","ApplyTransformations","rotation","set","SetHealthBar","value","progressBarSample","gameScene","graphicLibrary","graphicLibEntry","clonedDiv","cloneNode","objName","appendChild","positionOfObject","mainContainer","currentStageScale","style","display","visibility","left","top","querySelector","setAttribute","toString","SetText","text","Text","anchor","Repaint","gameObject","EnsureCorrectPixiObj","ConvertVectorFromGlobalSpaceToViewSpace","parseInt","RepaintChildren","RemoveUnusedChildren","newChild","newGraphicInfo","NeedToChangeGraphic","CreateFromContainer","CreateFromStaticSprite","CreateFromAnimatedSprite","container","Container","pivot","newSprite","Sprite","AnimatedSprite","fromFrames","Assets","cache","animations","animationSpeed","totalFrames","maxFPS","gotoAndPlay","currentFrame","floor","CheckIfObjectInViewport","stageCoordinates","spriteStageSize","topRight","bottomLeft","ConvertPointFromGlobalSpaceToViewSpace","startOfCoordinates","PrepareSpriteSheet","load","renderer","resize","max","scale","backgroundController","mainLoop","targetFrameRate","presentObjects","Application","backgroundColor","autoDensity","resolution","devicePixelRatio","body","start","addEventListener","DisplayGameObject","positionInViewSpace","GetEstimatedSize","currentHandle","EnsureGraphicObjectRemoved","mainContainerPos","RemoveUnusedGraphics","existingObjectName","keyStates","leftMouseButtonPressed","lastAngle","lastMovementPower","event","target","matches","code","toUpperCase","mouseX","clientX","mouseY","clientY","mouseVector","min","atan2","button","IsKeyDown","ClientInput","endpoint","connection","signalR","HubConnectionBuilder","withUrl","withHubProtocol","MP","MessagePackHubProtocol","build","mapper","Mapper","invoke","personalInfoHandler","on","location","SendMessage","sendMessageNetworkHandler","messageContainer","lastReceivedMaxMessageId","newMax","map","mess","storedMessages","push","slice","textContainer","innerHTML","reverse","sendButton","onclick","lastInvestmentRequest","lastRepairRequest","reviveButton","reviveMessage","debugMessage","playersTable","safeZoneMessage","investmentsTable","damageEffects","healthNormalized","opacity","repairButton","innerContent","i","row","rows","insertRow","currentVal","cells","insertCell","cell3","newButton","createElement","classList","updateButton","remove","info","myObj","toFixed","round","navigator","effectiveType","rtt","onReviveButtonPress","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","e","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","forEach","bind","__webpack_exports__"],"sourceRoot":""}